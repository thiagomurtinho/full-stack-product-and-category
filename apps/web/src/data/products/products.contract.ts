import { z } from 'zod'
import { baseEntitySchema, apiBaseEntitySchema, slugSchema } from '../shared/validation'

/**
 * Zod schema for validating product data.
 * Extends baseEntitySchema with product-specific fields.
 */
export const productSchema = baseEntitySchema.extend({
  name: z.string().min(1).max(200),
  slug: slugSchema,
  description: z.string().max(1000).optional(),
  price: z.number().positive(),
  imageUrl: z.string().url().nullable().optional(),
  categoryIds: z.array(z.uuid()),
})

/**
 * Zod schema for validating product data from API responses.
 * Handles date strings from API and converts them to Date objects.
 */
export const apiProductSchema = apiBaseEntitySchema.extend({
  name: z.string().min(1).max(200),
  slug: slugSchema,
  description: z.string().max(1000).optional(),
  price: z.number().positive(),
  imageUrl: z.string().url().nullable().optional(),
  categoryIds: z.array(z.uuid()),
})

/**
 * Zod schema for validating product creation data.
 * Omits id, createdAt, and updatedAt fields as they are generated by the server.
 */
export const createProductSchema = productSchema.omit({
  id: true,
  createdAt: true,
  updatedAt: true,
})

/**
 * Zod schema for validating product update data.
 * Makes all fields optional for partial updates.
 */
export const updateProductSchema = createProductSchema.partial()

/**
 * Zod schema for validating product category data from API responses.
 * Handles date strings appropriately and matches backend structure.
 */
export const productCategorySchema = z.object({
  id: z.uuid(),
  name: z.string(),
  slug: z.string(),
  parentId: z.uuid().nullable().optional(),
  path: z.object({
    ids: z.array(z.uuid()),
    names: z.array(z.string()),
    slugs: z.array(z.string()),
    fullPath: z.string(),
  }).optional(),
})

/**
 * Zod schema for validating product data with associated categories.
 * Extends productSchema with categories and categoryPaths fields.
 */
export const productWithCategoriesSchema = productSchema.extend({
  categories: z.array(productCategorySchema),
  categoryPaths: z.array(z.string()),
})

/**
 * Zod schema for validating product data from API with categories.
 * Handles date strings from API and includes categories and categoryPaths fields.
 * Updated to use proper API category schema with date handling.
 */
export const apiProductWithCategoriesSchema = apiProductSchema.extend({
  categories: z.array(productCategorySchema),
  categoryPaths: z.array(z.string()),
}) 