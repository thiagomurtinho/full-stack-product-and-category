import { z } from 'zod'
import { baseEntitySchema, apiBaseEntitySchema, slugSchema, categoryPathSchema } from '../shared/validation'

/**
 * Zod schema for validating category data.
 * Extends baseEntitySchema with category-specific fields.
 */
export const categorySchema = baseEntitySchema.extend({
  name: z.string().min(1).max(100),
  slug: slugSchema,
  parentId: z.uuid().nullable(),
})

/**
 * Zod schema for validating category data from API responses.
 * Handles date strings from API and converts them to Date objects.
 */
export const apiCategorySchema = apiBaseEntitySchema.extend({
  name: z.string().min(1).max(100),
  slug: slugSchema,
  parentId: z.uuid().nullable(),
})

/**
 * Zod schema for validating category creation data.
 * Omits id, createdAt, and updatedAt fields as they are generated by the server.
 */
export const createCategorySchema = categorySchema.omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  parentId: z.uuid().nullable().optional(),
})

/**
 * Zod schema for validating category update data.
 * Makes all fields optional for partial updates.
 */
export const updateCategorySchema = createCategorySchema.partial()

/**
 * Zod schema for validating category data with hierarchical path information.
 * Extends categorySchema with optional path and children fields.
 * Updated to handle recursive category structure properly.
 */
export const categoryWithPathSchema = categorySchema.extend({
  path: categoryPathSchema.optional(),
  children: z.array(z.lazy(() => categorySchema)).optional(),
})

/**
 * Zod schema for validating category data from API with path information.
 * Handles date strings from API and includes optional path and children fields.
 * Updated to handle recursive category structure properly.
 */
export const apiCategoryWithPathSchema = apiCategorySchema.extend({
  path: categoryPathSchema.optional(),
  children: z.array(z.lazy(() => apiCategorySchema)).optional(),
}) 